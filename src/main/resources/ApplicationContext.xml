<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:p="http://www.springframework.org/schema/p"
xmlns:tx="http://www.springframework.org/schema/tx"
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<!-- 自动扫描 -->
    <context:annotation-config/> 
 	<!-- 启动扫描注解 -->
	<context:component-scan base-package="com.tech.rpc" >
<!-- 	  <context:exclude-filter type="annotation"  expression="org.springframework.stereotype.Service" />  -->
	</context:component-scan>
	
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:mysql.properties" />
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="initialSize" value="${initialSize}"></property>
		<property name="maxActive" value="${maxActive}"></property>
		<property name="maxIdle" value="${maxIdle}"></property>
		<property name="minIdle" value="${minIdle}"></property>
		<property name="maxWait" value="${maxWait}"></property>
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="configLocation" value="classpath:configuration.xml"></property>
<!-- 		<property name="mapperLocations" value="classpath*:com/rpc/app/*.xml" /> -->
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tech.rpc" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

    <!-- 开启事务注解驱动 -->
    <tx:annotation-driven/>
    
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">   
		<property name="dataSource" ref="dataSource" />   
	</bean>
	
<!--    <tx:annotation-driven transaction-manager="txManager" />  -->
	<!-- 事务通知 要注明rollback-for类型,并不是所有的异常都回滚的 -->
   <tx:advice id="txAdvice" transaction-manager="txManager">
    <tx:attributes>
      <tx:method name="find*" read-only="true"/>
      <!--除了上面标识的方法,其他方法全是只读方法-->
      <tx:method name="*" propagation="REQUIRED" rollback-for="Throwable"/>
    </tx:attributes>
   </tx:advice>

   <aop:config>
    <!-- Service事务管理  com.berchina.util.rpc.two.module.user -->
     <aop:pointcut id="serviceOperation" expression="(execution(* com.tech.rpc.module.user.*Service.*(..)))"/>
     <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
   </aop:config>
	
	<context:component-scan base-package="com.tech.rpc.frame.spring,com.tech.rpc.module">
		<context:include-filter type="annotation" expression="com.tech.rpc.frame.annotation.BerBean" />
		<context:include-filter type="annotation" expression="com.tech.rpc.frame.annotation.BerServiceImpl" />
	</context:component-scan>
</beans>